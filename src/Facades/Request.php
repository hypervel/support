<?php

declare(strict_types=1);

namespace Hypervel\Support\Facades;

use Hypervel\Http\Contracts\RequestContract;

/**
 * @method static array allFiles()
 * @method static bool anyFilled(array|string $keys)
 * @method static bool boolean(string|null $key = null, bool $default = false)
 * @method static \Hypervel\Support\Collection collect(array|string|null $key = null)
 * @method static \Carbon\Carbon|null date(string $key, string|null $format = null, string|null $tz = null)
 * @method static null|object enum(string $key, string $enumClass)
 * @method static array except(array|mixed $keys)
 * @method static bool exists(array|string $key)
 * @method static bool filled(array|string $key)
 * @method static float float(string $key, float $default = 0)
 * @method static \Stringable string(string $key, mixed $default = null)
 * @method static \Stringable str(string $key, mixed $default = null)
 * @method static bool hasAny(array|string $keys)
 * @method static string getHost()
 * @method static string getHttpHost()
 * @method static int|string getPort()
 * @method static string getScheme()
 * @method static bool isSecure()
 * @method static int integer(string $key, int $default = 0)
 * @method static bool isEmptyString(string $key)
 * @method static bool isJson()
 * @method static bool isNotFilled(array|string $key)
 * @method static array keys()
 * @method static \Hypervel\Http\Request merge(array $input)
 * @method static \Hypervel\Http\Request replace(array $input)
 * @method static \Hypervel\Http\Request mergeIfMissing(array $input)
 * @method static bool missing(array|string $key)
 * @method static array only(array|mixed $keys)
 * @method static string getSchemeAndHttpHost()
 * @method static string schemeAndHttpHost()
 * @method static bool expectsJson()
 * @method static bool wantsJson()
 * @method static bool accepts(array|string $contentTypes)
 * @method static string|null prefers(array|string $contentTypes)
 * @method static bool acceptsAnyContentType()
 * @method static bool acceptsJson()
 * @method static bool acceptsHtml()
 * @method static \Hypervel\Http\Request|mixed whenFilled(string $key, callable $callback, callable|null $default = null)
 * @method static \Hypervel\Http\Request|mixed whenHas(string $key, callable $callback, callable|null $default = null)
 * @method static string|null getClientIp()
 * @method static string|null ip()
 * @method static string root()
 * @method static string fullUrl()
 * @method static string fullUrlWithQuery(array $query)
 * @method static string fullUrlWithoutQuery(array|string $keys)
 * @method static string method()
 * @method static array headers()
 * @method static string|null bearerToken()
 * @method static string[] getAcceptableContentTypes()
 * @method static string|null getMimeType(string $format)
 * @method static string[] getMimeTypes(string $format)
 * @method static bool isXmlHttpRequest()
 * @method static bool ajax()
 * @method static bool pjax()
 * @method static bool prefetch()
 * @method static bool isRange()
 * @method static bool hasSession()
 * @method static \Hypervel\Session\Contracts\Session session()
 * @method static array validate(array $rules, array $messages = [], array $customAttributes = [])
 * @method static \Closure getUserResolver()
 * @method static \Hypervel\Http\Request setUserResolver(\Closure $callback)
 * @method static mixed user(string|null $guard = null)
 * @method static bool hasValidSignature(bool $absolute = true)
 * @method static bool hasValidRelativeSignature()
 * @method static bool hasValidSignatureWhileIgnoring(array $ignoreQuery = [], bool $absolute = true)
 * @method static bool hasValidRelativeSignatureWhileIgnoring(array $ignoreQuery = [])
 * @method static \Psr\Http\Message\ServerRequestInterface getPsr7Request()
 * @method static mixed query(string|null $key = null, mixed $default = null)
 * @method static mixed route(string $key, mixed $default = null)
 * @method static mixed post(string|null $key = null, mixed $default = null)
 * @method static mixed input(string $key, mixed $default = null)
 * @method static array inputs(array $keys, array|null $default = null)
 * @method static array all()
 * @method static array hasInput(array $keys)
 * @method static bool has(array|string $keys)
 * @method static string|null header(string $key, string|null $default = null)
 * @method static string path()
 * @method static string getPathInfo()
 * @method static bool is(mixed ...$patterns)
 * @method static string decodedPath()
 * @method static string getRequestUri()
 * @method static string url()
 * @method static null|string getQueryString()
 * @method static string normalizeQueryString(string $qs)
 * @method static void cookie(string $key, mixed $default = null)
 * @method static bool hasCookie(string $key)
 * @method static mixed server(string $key, mixed $default = null)
 * @method static bool isMethod(string $method)
 * @method static null|\Hyperf\HttpMessage\Upload\UploadedFile|\Hyperf\HttpMessage\Upload\UploadedFile[] file(string $key, mixed $default = null)
 * @method static bool hasFile(string $key)
 * @method static string getProtocolVersion()
 * @method static \Psr\Http\Message\MessageInterface withProtocolVersion(string $version)
 * @method static array getHeaders()
 * @method static bool hasHeader(string $name)
 * @method static array getHeader(string $name)
 * @method static string getHeaderLine(string $name)
 * @method static \Psr\Http\Message\MessageInterface withHeader(string $name, string|string[] $value)
 * @method static \Psr\Http\Message\MessageInterface withAddedHeader(string $name, string|string[] $value)
 * @method static \Psr\Http\Message\MessageInterface withoutHeader(string $name)
 * @method static \Psr\Http\Message\StreamInterface getBody()
 * @method static \Psr\Http\Message\MessageInterface withBody(\Psr\Http\Message\StreamInterface $body)
 * @method static string getRequestTarget()
 * @method static \Psr\Http\Message\RequestInterface withRequestTarget(string $requestTarget)
 * @method static string getMethod()
 * @method static \Psr\Http\Message\RequestInterface withMethod(string $method)
 * @method static \Psr\Http\Message\UriInterface getUri()
 * @method static \Psr\Http\Message\RequestInterface withUri(\Psr\Http\Message\UriInterface $uri, bool $preserveHost = false)
 * @method static array getServerParams()
 * @method static array getCookieParams()
 * @method static \Psr\Http\Message\ServerRequestInterface withCookieParams(array $cookies)
 * @method static array getQueryParams()
 * @method static \Psr\Http\Message\ServerRequestInterface withQueryParams(array $query)
 * @method static array getUploadedFiles()
 * @method static \Psr\Http\Message\ServerRequestInterface withUploadedFiles(array $uploadedFiles)
 * @method static void getParsedBody()
 * @method static \Psr\Http\Message\ServerRequestInterface withParsedBody(null|array|object $data)
 * @method static array getAttributes()
 * @method static void getAttribute(string $name, mixed $default = null)
 * @method static \Psr\Http\Message\ServerRequestInterface withAttribute(string $name, mixed $value)
 * @method static \Psr\Http\Message\ServerRequestInterface withoutAttribute(string $name)
 * @method static void clearStoredParsedData()
 * @method static void macro(string $name, callable|object $macro)
 * @method static void mixin(object $mixin, bool $replace = true)
 * @method static bool hasMacro(string $name)
 *
 * @see \Hypervel\Http\Request
 * @see \Hyperf\HttpServer\Request
 */
class Request extends Facade
{
    protected static function getFacadeAccessor()
    {
        return RequestContract::class;
    }
}
